{"version":3,"sources":["../../src/decorators/inject.decorator.js"],"names":["Inject","token","undefined","arguments","dependencyRef","get","instance","construct","item","dependencies","args","isSingleton"],"mappings":";;;;;QASgBA,M,GAAAA,M;;AARhB;;AAEA;;;;;;AAMO,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAC7B;AACA,QAAO,YAAW;AACjB;AACA,MAAIA,UAAUC,SAAV,IAAuB,OAAOD,KAAP,KAAiB,QAA5C,EAAsD;AACrD;AACA,OAAIE,UAAU,CAAV,MAAiBD,SAAjB,IAA8B,OAAOC,UAAU,CAAV,CAAP,KAAwB,QAA1D,EAAoEF,QAAQE,UAAU,CAAV,CAAR,CAApE,KACK;AACJ;AACA,UAAM,+BAAN;AACA;AACD;;AAED;AACA,MAAIC,gBAAgB,gBAASC,GAAT,CAAaJ,KAAb,CAApB;AACA,MAAIG,kBAAkBF,SAAtB,EAAiC,0CAAwCD,KAAxC;;AAEjC;AACA,MAAIK,WAAWF,cAAcE,QAAd,EAAf;AACA,MAAIA,aAAa,IAAjB,EAAuB;AACtB;AACAA,cAAW,gBAASC,SAAT,CAAmBH,cAAcI,IAAjC,EAAuCJ,cAAcK,YAArD,EAAmEL,cAAcM,IAAjF,CAAX;;AAEA;AACA,OAAIN,cAAcO,WAAd,EAAJ,EAAiCP,cAAcE,QAAd,CAAuBA,QAAvB;AACjC;;AAED;AACA,SAAOA,QAAP;AACA,EA3BD;AA4BA,C,CAvCD","file":"inject.decorator.js","sourcesContent":["/** import dependencies */\nimport { Injector } from '../index';\n\n/**\n * Inject\n * A decorator that will find the dependency and return it to be injected in the class\n * @param {string} token The token name to use for injection\n * @returns {function} A function executed to decorate the Injectable\n */\nexport function Inject(token) {\n\t/** return the function that injects the dependency */\n\treturn function() {\n\t\t/** check the token */\n\t\tif (token === undefined || typeof token !== 'string') {\n\t\t\t/** check the arguments */\n\t\t\tif (arguments[0] !== undefined && typeof arguments[0] === 'string') token = arguments[0];\n\t\t\telse {\n\t\t\t\t/** throw exception that no token was passed */\n\t\t\t\tthrow 'No token given for injection.';\n\t\t\t}\n\t\t}\n\n\t\t/** get the dependency */\n\t\tlet dependencyRef = Injector.get(token);\n\t\tif (dependencyRef === undefined) throw `Dependency could not be found: ${token}`;\n\n\t\t/** check for singleton and instance */\n\t\tlet instance = dependencyRef.instance();\n\t\tif (instance === null) {\n\t\t\t/** construct the dependency */\n\t\t\tinstance = Injector.construct(dependencyRef.item, dependencyRef.dependencies, dependencyRef.args);\n\n\t\t\t/** set the dependencyRef instance */\n\t\t\tif (dependencyRef.isSingleton()) dependencyRef.instance(instance);\n\t\t}\n\n\t\t/** return the instance */\n\t\treturn instance;\n\t}\n}"]}