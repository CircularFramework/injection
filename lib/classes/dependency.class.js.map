{"version":3,"sources":["../../src/classes/dependency.class.js"],"names":["Dependency","token","item","dependencies","args","singleton","_instance","instance","push","tokens","forEach","addDependency","value","values","addArg"],"mappings":";;;;;;;;;;AAAA;;;;;;IAMMA,U;AACL,qBAAYC,KAAZ,EAAmBC,IAAnB,EAAyB;AAAA;;AACxB;;AAEA;AACA,OAAKD,KAAL,GAAaA,KAAb;;AAEA;AACA,OAAKC,IAAL,GAAYA,IAAZ;;AAEA;AACA,OAAKC,YAAL,GAAoB,EAApB;;AAEA;AACA,OAAKC,IAAL,GAAY,EAAZ;;AAEA;AACA,OAAKC,SAAL,GAAiB,IAAjB;;AAEA;;AAEA;AACA,MAAIC,YAAY,IAAhB;AACA,OAAKC,QAAL,GAAgB,UAACA,QAAD,EAAc;AAC7B,OAAIA,QAAJ,EAAcD,YAAYC,QAAZ;AACd,UAAOD,SAAP;AACA,GAHD;AAIA;;AAED;;AAEA;;;;;;;;;gCAKcL,K,EAAO;AACpB,QAAKE,YAAL,CAAkBK,IAAlB,CAAuBP,KAAvB;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;;kCAKgBQ,M,EAAQ;AAAA;;AACvBA,UAAOC,OAAP,CAAe;AAAA,WAAS,MAAKC,aAAL,CAAmBV,KAAnB,CAAT;AAAA,IAAf;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;;yBAKOW,K,EAAO;AACb,QAAKR,IAAL,CAAUI,IAAV,CAAeI,KAAf;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;;0BAKQC,M,EAAQ;AAAA;;AACfA,UAAOH,OAAP,CAAe;AAAA,WAAS,OAAKI,MAAL,CAAYF,KAAZ,CAAT;AAAA,IAAf;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;;+BAKaP,S,EAAW;AACvB,QAAKA,SAAL,GAAiBA,SAAjB;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;gCAIc;AACb,UAAO,KAAKA,SAAZ;AACA;;;;;;AAGF;;;QACSL,U,GAAAA,U","file":"dependency.class.js","sourcesContent":["/**\n * @class Dependency\n * Defines an injectable dependency\n * @param {string} token The token name used to find the dependency and inject it\n * @param {object} item The object item that will be injected\n */\nclass Dependency {\n\tconstructor(token, item) {\n\t\t/** public properties */\n\n\t\t/** @type {string} The token name used to identify the dependency */\n\t\tthis.token = token;\n\t\t\n\t\t/** @type {object} The object item itself */\n\t\tthis.item = item;\n\t\t\n\t\t/** @type {string[]} An array of token ids for dependencies of this item */\n\t\tthis.dependencies = [];\n\t\t\n\t\t/** @type {object[]} Additional arguments to pass the constructor */\n\t\tthis.args = [];\n\n\t\t/** @type {boolean} A boolean indicating whether or not this is a singleton */\n\t\tthis.singleton = true;\n\n\t\t/** private properties */\n\n\t\t/** @private {object} An instantiated instance of the dependency */\n\t\tlet _instance = null;\n\t\tthis.instance = (instance) => {\n\t\t\tif (instance) _instance = instance;\n\t\t\treturn _instance;\n\t\t};\n\t}\n\n\t/** public methods */\n\n\t/**\n\t * Add a dependency token to the array of dependencies for this item\n\t * @param {string} token The token name of the dependency\n\t * @returns {Dependency} Returns a self reference\n\t */\n\taddDependency(token) {\n\t\tthis.dependencies.push(token);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an array of dependencies for this item\n\t * @param {string[]} tokens An array of token ids\n\t * @returns {Dependency} Returns a self reference\n\t */\n\taddDependencies(tokens) {\n\t\ttokens.forEach(token => this.addDependency(token));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an argument to the array of arguments that will be passed to the constructor\n\t * @param {object} value A value to pass to the constructor\n\t * @returns {Dependency} Returns a self reference\n\t */\n\taddArg(value) {\n\t\tthis.args.push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add arguments that will be passed to the constructor\n\t * @param {object[]} values A array of values to pass to the constructor\n\t * @returns {Dependency} Returns a self reference\n\t */\n\taddArgs(values) {\n\t\tvalues.forEach(value => this.addArg(value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the singleton flag\n\t * @param {boolean} singleton A boolean flag indicating whether or not this is a singleton\n\t * @returns {Dependency} Returns a self reference\n\t */\n\tsetSingleton(singleton) {\n\t\tthis.singleton = singleton;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the singleton flag\n\t * @returns {boolean} The singleton flag\n\t */\n\tisSingleton() {\n\t\treturn this.singleton;\n\t}\n}\n\n/** export Dependency */\nexport { Dependency };"]}